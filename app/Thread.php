<?php

namespace App;

use App\Notifications\ThreadWasUpdated;
use Illuminate\Database\Eloquent\Model;

class Thread extends Model
{
    use RecordsActivity;

    protected $guarded = [];

    protected $with = ['creator', 'channel'];

    protected $appends=["isSubscribedTo"];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($thread) {
            $thread->replies->each->delete();
        });
    }

    public function path()
    {

        return "/threads/{$this->channel->slug}/{$this->id}";
    }


    public function replies()
    {

        return $this->hasMany(Reply::class);


    }

    function creator()
    {

        return $this->belongsTo('App\User', 'user_id');

    }

    public function channel()
    {
        return $this->belongsTo(Channel::class);
    }

    function addReply($reply)
    {
        $reply = $this->replies()->create($reply);

        $this->subscriptions->where("user_id", "!=", $reply->user_id)

            ->each
            ->notify($reply);
        return $reply;
    }

    function scopeFilter($query, $filters)
    {

        return $filters->apply($query);

    }

    function subscribe($userId = null)
    {

        $this->subscriptions()->create([
            "user_id" => $userId ?: auth()->id(),

        ]);

        return $this;

    }

    function unsubscribe($userId = null)
    {

        $this->subscriptions()
            ->where("user_id", $userId ?: auth()->id())
            ->delete();

    }

    function subscriptions()
    {


        return $this->hasMany(ThreadSubscription::class);


    }

    public function getIsSubscribedToAttribute(){
        return $this->subscriptions()

            ->where("user_id",auth()->id())

            ->exists();
    }

}
